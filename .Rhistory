knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyverse)
datameor1 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2024.csv")
datameor2 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2023.csv")
datameor3 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2022.csv")
datameor4 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2021.csv")
datameor <- rbind(datameor1, datameor2, datameor3, datameor4)
# fix dates with character format
datameor$OCCUPANCY_DATE <- as.character(datameor$OCCUPANCY_DATE)
#unique(datameor$OCCUPANCY_DATE)
datameor$OCCUPANCY_DATE <- gsub("^21", "2021", datameor$OCCUPANCY_DATE)
datameor$OCCUPANCY_DATE <- gsub("^22", "2022", datameor$OCCUPANCY_DATE)
#unique(datameor$OCCUPANCY_DATE)
# convert back to date format
datameor$OCCUPANCY_DATE <- as.Date(datameor$OCCUPANCY_DATE)
data_bed <- filter(datameor, CAPACITY_TYPE == 'Bed Based Capacity')
data_room <- filter(datameor, CAPACITY_TYPE == 'Room Based Capacity')
data_bed <- data_bed %>% select(-contains("ROOM"))
data_room <- data_room %>% select(-contains("BED"))
print(unique(data_bed$CAPACITY_TYPE))
print(unique(data_room$CAPACITY_TYPE))
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID)
summarise(shelter_bed_based)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyverse)
datameor1 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2024.csv")
datameor2 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2023.csv")
datameor3 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2022.csv")
datameor4 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2021.csv")
datameor <- rbind(datameor1, datameor2, datameor3, datameor4)
# fix dates with character format
datameor$OCCUPANCY_DATE <- as.character(datameor$OCCUPANCY_DATE)
#unique(datameor$OCCUPANCY_DATE)
datameor$OCCUPANCY_DATE <- gsub("^21", "2021", datameor$OCCUPANCY_DATE)
datameor$OCCUPANCY_DATE <- gsub("^22", "2022", datameor$OCCUPANCY_DATE)
#unique(datameor$OCCUPANCY_DATE)
# convert back to date format
datameor$OCCUPANCY_DATE <- as.Date(datameor$OCCUPANCY_DATE)
data_bed <- filter(datameor, CAPACITY_TYPE == 'Bed Based Capacity')
data_room <- filter(datameor, CAPACITY_TYPE == 'Room Based Capacity')
data_bed <- data_bed %>% select(-contains("ROOM"))
data_room <- data_room %>% select(-contains("BED"))
#print(unique(data_bed$CAPACITY_TYPE))
#print(unique(data_room$CAPACITY_TYPE))
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID)
summarise(shelter_bed_based)
head(data_bed)
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID)
head(shelter_bed_based)
datameor1 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2024.csv")
datameor2 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2023.csv")
datameor3 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2022.csv")
datameor4 <- read.csv("daily-shelter-overnight-service-occupancy-capacity-2021.csv")
datameor <- rbind(datameor1, datameor2, datameor3, datameor4)
# fix dates with character format
datameor$OCCUPANCY_DATE <- as.character(datameor$OCCUPANCY_DATE)
#unique(datameor$OCCUPANCY_DATE)
datameor$OCCUPANCY_DATE <- gsub("^21", "2021", datameor$OCCUPANCY_DATE)
datameor$OCCUPANCY_DATE <- gsub("^22", "2022", datameor$OCCUPANCY_DATE)
#unique(datameor$OCCUPANCY_DATE)
# convert back to date format
datameor$OCCUPANCY_DATE <- as.Date(datameor$OCCUPANCY_DATE)
data_bed <- filter(datameor, CAPACITY_TYPE == 'Bed Based Capacity')
data_room <- filter(datameor, CAPACITY_TYPE == 'Room Based Capacity')
data_bed <- data_bed %>% select(-contains("ROOM"))
data_room <- data_room %>% select(-contains("BED"))
#print(unique(data_bed$CAPACITY_TYPE))
#print(unique(data_room$CAPACITY_TYPE))
head(data_bed)
head(datameor)
head(datameor)
print(datameor)
head(data_bed)
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID)
head(shelter_bed_based)
head(data_bed)
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID)
print(shelter_bed_based)
# Bed-based
top_5_bed_based = shelter_bed_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Room-based
top_5_room_based = shelter_room_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
head(data_bed)
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_BEDS)
shelter_room_based <- data_room %>%
select(SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_ROOMS)
# Bed-based
top_5_bed_based = shelter_bed_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Room-based
top_5_room_based = shelter_room_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Bed-based
top_5_bed_based_df = shelter_bed_based %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID))) %>%
filter(shelter_location_pair %in% top_5_bed_based$shelter_location_pair) %>%
summarise(capacity_actual_sum = sum(CAPACITY_ACTUAL_BED),
capacity_funding_sum = sum(CAPACITY_FUNDING_BED),
occupied_sum = sum(OCCUPIED_BEDS),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(OCCUPANCY_DATE, shelter_location_pair))
head(data_bed)
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_BEDS, CAPACITY_ACTUAL_BED, CAPACITY_FUNDING_BED)
shelter_room_based <- data_room %>%
select(SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_ROOMS, CAPACITY_ACTUAL_ROOM, CAPACITY_FUNDING_ROOM)
# Bed-based
top_5_bed_based = shelter_bed_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Room-based
top_5_room_based = shelter_room_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Bed-based
top_5_bed_based_df = shelter_bed_based %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID))) %>%
filter(shelter_location_pair %in% top_5_bed_based$shelter_location_pair) %>%
summarise(capacity_actual_sum = sum(CAPACITY_ACTUAL_BED),
capacity_funding_sum = sum(CAPACITY_FUNDING_BED),
occupied_sum = sum(OCCUPIED_BEDS),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(OCCUPANCY_DATE, shelter_location_pair))
head(data_bed)
shelter_bed_based <- data_bed %>%
select(SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_BEDS, CAPACITY_ACTUAL_BED, CAPACITY_FUNDING_BED, OCCUPIED_BEDS)
shelter_room_based <- data_room %>%
select(SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_ROOMS, CAPACITY_ACTUAL_ROOM, CAPACITY_FUNDING_ROOM, OCCUPIED_ROOMS)
# Bed-based
top_5_bed_based = shelter_bed_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Room-based
top_5_room_based = shelter_room_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Bed-based
top_5_bed_based_df = shelter_bed_based %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID))) %>%
filter(shelter_location_pair %in% top_5_bed_based$shelter_location_pair) %>%
summarise(capacity_actual_sum = sum(CAPACITY_ACTUAL_BED),
capacity_funding_sum = sum(CAPACITY_FUNDING_BED),
occupied_sum = sum(OCCUPIED_BEDS),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(OCCUPANCY_DATE, shelter_location_pair))
head(data_bed)
shelter_bed_based <- data_bed %>%
select(OCCUPANCY_DATE, SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_BEDS, CAPACITY_ACTUAL_BED, CAPACITY_FUNDING_BED, OCCUPIED_BEDS)
shelter_room_based <- data_room %>%
select(OCCUPANCY_DATE, SHELTER_ID, LOCATION_ID, OCCUPANCY_RATE_ROOMS, CAPACITY_ACTUAL_ROOM, CAPACITY_FUNDING_ROOM, OCCUPIED_ROOMS)
# Bed-based
top_5_bed_based = shelter_bed_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Room-based
top_5_room_based = shelter_room_based %>%
group_by(SHELTER_ID, LOCATION_ID) %>%
summarise(count = n(), .groups='drop') %>%
arrange(desc(count)) %>%
slice_max(order_by=count, n=5) %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID)))
# Bed-based
top_5_bed_based_df = shelter_bed_based %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID))) %>%
filter(shelter_location_pair %in% top_5_bed_based$shelter_location_pair) %>%
summarise(capacity_actual_sum = sum(CAPACITY_ACTUAL_BED),
capacity_funding_sum = sum(CAPACITY_FUNDING_BED),
occupied_sum = sum(OCCUPIED_BEDS),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(OCCUPANCY_DATE, shelter_location_pair))
# Bed-based
top_5_bed_based_df = shelter_bed_based %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID))) %>%
filter(shelter_location_pair %in% top_5_bed_based$shelter_location_pair) %>%
summarise(capacity_actual_sum = sum(CAPACITY_ACTUAL_BED),
capacity_funding_sum = sum(CAPACITY_FUNDING_BED),
occupied_sum = sum(OCCUPIED_BEDS),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(OCCUPANCY_DATE, shelter_location_pair))
# Room-based
top_5_room_based_df = shelter_room_based %>%
mutate(shelter_location_pair = paste(as.character(SHELTER_ID),
"-",
as.character(LOCATION_ID))) %>%
filter(shelter_location_pair %in% top_5_room_based$shelter_location_pair) %>%
summarise(capacity_actual_sum = sum(CAPACITY_ACTUAL_ROOM),
capacity_funding_sum = sum(CAPACITY_FUNDING_ROOM),
occupied_sum = sum(OCCUPIED_ROOMS),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(OCCUPANCY_DATE, shelter_location_pair))
# Room based
for (pairing in unique(top_5_room_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_room_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Room) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
diff(Occupancy_Bed) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
diff(Occupancy_Bed) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
diff(Occupancy_Bed, lag = 1, differences = 1) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
diff(Occupancy_Bed, lag = 1, differences = 1) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
diff(Occupancy_Bed, lag = 1, differences = 1) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
diff(Occupancy_Bed, lag = 1, differences = 1) %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
select(Occupancy_Bed) %>%
diff(Occupancy_Bed, lag = 1, differences = 1) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
install.packages("opendatatoronto")
# data merging script
# https://open.toronto.ca/dataset/daily-shelter-overnight-service-occupancy-capacity/
library(opendatatoronto)
library(dplyr)
resources <- list_package_resources("21c83b32-d5a8-4106-a54f-010dbe49f6f2")
relevant <- filter(resources, format == "CSV" )
# Check why there are 2 csv files per year
for (i in 1:nrow(relevant))
{
tmp <- filter(relevant, row_number()==i) %>% get_resource()
cat("row ", i, " has ", dim(tmp)[1] , "obs\n")
}
# The first file for each year is just a preview
# Files without year in name are for 2025
# Use only 2021-2024 data
relevant <- relevant[7:10,]
relevant[,1] <- c("2022", "2021", "2023", "2024")
relevant <- arrange(relevant, name)
#  Combine all tables in relevant
tbls <- list()
for (i in 1:nrow(relevant))
{
tbls[[i]] <- filter(relevant, row_number()==i) %>% get_resource
}
alldata <- bind_rows(tbls, .id="file_id")
# Save data
saveRDS(alldata, "alloccupancy.rds")
setwd("C:/Users/yihoi/OneDrive - University of Toronto/Coding/R/R Project Git/Toronto-Shelter-Analysis")
# Bed based
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
acf_data <- top_5_bed_based_df %>%
filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
diff(Occupancy_Bed, lag = 1, differences = 1) %>%
select(Occupancy_Bed) %>%
pull()
acf_result <- acf(acf_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
