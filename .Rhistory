qqplot(corr_data_2_bed, sample_norm)
#sarima(corr_data_1_bed, 3, 1, 2)
# kurtosis(corr_data_1_bed)
# acf(corr_data_1_bed^2)
#
# fit_1 <- garchFit(~garch(1, 0), data = corr_data_1_bed, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1@residuals)
# plot(fit_1, which = 7)
# summary(fit_1)
#
# fit_1.1 <- garchFit(~garch(1, 1), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1.1@residuals)
# plot(fit_1.1, which = 7)
# summary(fit_1.1)
em_fit <- fit_em(corr_data_2_bed)
summary(em_fit)
print(em_fit$Phi)
ks <- Ksmooth(corr_data_2_bed, A = 1, mu0 = em_fit$mu0,
Sigma0 = em_fit$Sigma0, Phi = em_fit$Phi,
sQ = sqrt(em_fit$Q), sR = sqrt(em_fit$R))
plot(1:length(corr_data_2_bed), corr_data_2_bed, main = "Predict", xlab = "time", ylab = "")
#ylim = c(min(em_fit$mu0) - 3, max(em_fit$mu0 + 3)))
lines(ks$Xp, col = "green")
lines(ks$Xp + 2*sqrt(ks$Pp), lty = 2, col = "red")
lines(ks$Xp - 2*sqrt(ks$Pp), lty = 2, col = "blue")
summary(ks)
plot(ks$Pf)
vector <- as.vector(ks$Xp)
time_series <- as.ts(vector, start = 1)
forecasted_em <- forecast(time_series, h = 50)
plot(forecasted_em, main = pairing_2_bed)
hist(forecasted_em$mean)
pairing_3_bed <- unique(top_5_bed_based_df$shelter_location_pair)[3]
print(pairing_3_bed)
corr_data_3_bed <- top_5_bed_based_df %>%
dplyr::filter(shelter_location_pair == pairing_3_bed) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Room) %>%
pull()
sample_norm <- rnorm(length(corr_data_3_bed),0,1)
qqplot(corr_data_3_bed, sample_norm)
#sarima(corr_data_3_bed, 3, 1, 2)
# kurtosis(corr_data_3_bed)
# acf(corr_data_3_bed^2)
#
# fit_1 <- garchFit(~garch(1, 0), data = corr_data_3_bed, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1@residuals)
# plot(fit_1, which = 7)
# summary(fit_1)
#
# fit_1.1 <- garchFit(~garch(1, 1), data = corr_data_3, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1.1@residuals)
# plot(fit_1.1, which = 7)
# summary(fit_1.1)
em_fit <- fit_em(corr_data_3_bed)
summary(em_fit)
print(em_fit$Phi)
ks <- Ksmooth(corr_data_3_bed, A = 1, mu0 = em_fit$mu0,
Sigma0 = em_fit$Sigma0, Phi = em_fit$Phi,
sQ = sqrt(em_fit$Q), sR = sqrt(em_fit$R))
plot(1:length(corr_data_3_bed), corr_data_3_bed, main = "Predict", xlab = "time", ylab = "")
#ylim = c(min(em_fit$mu0) - 3, max(em_fit$mu0 + 3)))
lines(ks$Xp, col = "green")
lines(ks$Xp + 2*sqrt(ks$Pp), lty = 2, col = "red")
lines(ks$Xp - 2*sqrt(ks$Pp), lty = 2, col = "blue")
summary(ks)
plot(ks$Pf)
vector <- as.vector(ks$Xp)
time_series <- as.ts(vector, start = 1)
forecasted_em <- forecast(time_series, h = 50)
plot(forecasted_em, main = pairing_3_bed)
hist(forecasted_em$mean)
pairing_4_bed <- unique(top_5_bed_based_df$shelter_location_pair)[4]
print(pairing_4_bed)
corr_data_4_bed <- top_5_bed_based_df %>%
dplyr::filter(shelter_location_pair == pairing_4_bed) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Room) %>%
pull()
sample_norm <- rnorm(length(corr_data_4_bed),0,1)
qqplot(corr_data_4_bed, sample_norm)
#sarima(corr_data_4_bed, 3, 1, 2)
# kurtosis(corr_data_4_bed)
# acf(corr_data_4_bed^2)
#
# fit_1 <- garchFit(~garch(1, 0), data = corr_data_4_bed, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1@residuals)
# plot(fit_1, which = 7)
# summary(fit_1)
#
# fit_1.1 <- garchFit(~garch(1, 1), data = corr_data_4_bed, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1.1@residuals)
# plot(fit_1.1, which = 7)
# summary(fit_1.1)
em_fit <- fit_em(corr_data_3_bed)
summary(em_fit)
print(em_fit$Phi)
ks <- Ksmooth(corr_data_4_bed, A = 1, mu0 = em_fit$mu0,
Sigma0 = em_fit$Sigma0, Phi = em_fit$Phi,
sQ = sqrt(em_fit$Q), sR = sqrt(em_fit$R))
plot(1:length(corr_data_4_bed), corr_data_4_bed, main = "Predict", xlab = "time", ylab = "")
#ylim = c(min(em_fit$mu0) - 3, max(em_fit$mu0 + 3)))
lines(ks$Xp, col = "green")
lines(ks$Xp + 2*sqrt(ks$Pp), lty = 2, col = "red")
lines(ks$Xp - 2*sqrt(ks$Pp), lty = 2, col = "blue")
summary(ks)
plot(ks$Pf)
vector <- as.vector(ks$Xp)
time_series <- as.ts(vector, start = 1)
forecasted_em <- forecast(time_series, h = 50)
plot(forecasted_em, main = pairing_4_bed)
hist(forecasted_em$mean)
pairing_5_bed <- unique(top_5_bed_based_df$shelter_location_pair)[5]
print(pairing_5_bed)
corr_data_5_bed <- top_5_bed_based_df %>%
dplyr::filter(shelter_location_pair == pairing_5_bed) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Room) %>%
pull()
sample_norm <- rnorm(length(corr_data_5_bed),0,1)
qqplot(corr_data_5_bed, sample_norm)
#sarima(corr_data_5_bed, 3, 1, 2)
# kurtosis(corr_data_5_bed)
# acf(corr_data_5_bed^2)
#
# fit_1 <- garchFit(~garch(1, 0), data = corr_data_5_bed, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1@residuals)
# plot(fit_1, which = 7)
# summary(fit_1)
#
# fit_1.1 <- garchFit(~garch(1, 1), data = corr_data_5_bed, include.mean = TRUE, cond.dist = "norm")
# plot(fit_1.1@residuals)
# plot(fit_1.1, which = 7)
# summary(fit_1.1)
em_fit <- fit_em(corr_data_3_bed)
summary(em_fit)
print(em_fit$Phi)
ks <- Ksmooth(corr_data_5_bed, A = 1, mu0 = em_fit$mu0,
Sigma0 = em_fit$Sigma0, Phi = em_fit$Phi,
sQ = sqrt(em_fit$Q), sR = sqrt(em_fit$R))
plot(1:length(corr_data_5_bed), corr_data_5_bed, main = "Predict", xlab = "time", ylab = "")
#ylim = c(min(em_fit$mu0) - 3, max(em_fit$mu0 + 3)))
lines(ks$Xp, col = "green")
lines(ks$Xp + 2*sqrt(ks$Pp), lty = 2, col = "red")
lines(ks$Xp - 2*sqrt(ks$Pp), lty = 2, col = "blue")
summary(ks)
plot(ks$Pf)
vector <- as.vector(ks$Xp)
time_series <- as.ts(vector, start = 1)
forecasted_em <- forecast(time_series, h = 50)
plot(forecasted_em, main = pairing_5_bed)
hist(forecasted_em$mean)
for (pairing in unique(top_5_room_based_df$shelter_location_pair)) {
tryCatch({
corr_data <- top_5_room_based_df %>%
dplyr::filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Room) %>%
pull()
#corr_data <- diff(corr_data)
model <- auto.arima(corr_data)
print(model)
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
for (pairing in unique(top_5_room_based_df$shelter_location_pair)) {
tryCatch({
corr_data <- top_5_room_based_df %>%
dplyr::filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Room) %>%
pull() %>%
diff()
par(mfrow = c(1, 2))
acf_result <- acf(corr_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
pacf_result <- pacf(corr_data, lag.max = 10000, plot = FALSE)
plot(pacf_result, main = paste("PACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
corr_data <- top_5_bed_based_df %>%
dplyr::filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Bed) %>%
pull()%>%
diff()
par(mfrow = c(1, 2))
acf_result <- acf(corr_data, lag.max = 10000, plot = FALSE)
plot(acf_result, main = paste("ACF for Organization ID", pairing))
pacf_result <- pacf(corr_data, lag.max = 10000, plot = FALSE)
plot(pacf_result, main = paste("PACF for Organization ID", pairing))
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
for (pairing in unique(top_5_bed_based_df$shelter_location_pair)) {
tryCatch({
corr_data <- top_5_bed_based_df %>%
dplyr::filter(shelter_location_pair == pairing) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Bed = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Bed) %>%
pull()%>%
diff()
par(mfrow = c(1, 2))
#auto.arima(corr_data)
}, error = function(e) {
message(paste("Skipping Pairing IDs", pairing, "due to error:", e$message))
})
}
print(unique(top_5_room_based_df$shelter_location_pair))
pairing_1 <- unique(top_5_room_based_df$shelter_location_pair)[1]
corr_data_1 <- top_5_room_based_df %>%
dplyr::filter(shelter_location_pair == pairing_1) %>%
mutate(year_week = strftime(OCCUPANCY_DATE, format="%Y%V")) %>%
group_by(year_week) %>%
summarise(
Occupancy_Room = mean(occupancy_rate, na.rm = TRUE)
) %>%
arrange(year_week) %>%
ungroup() %>%
dplyr::select(Occupancy_Room) %>%
pull()
sarima(corr_data_1, 2, 1, 2)
kurtosis(corr_data_1)
acf(corr_data_1^2)
garch_fit_1_0 <- garchFit(~garch(1, 0), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
plot(garch_fit_1_0@residuals)
plot(garch_fit_1_0, which = 7)
#summary(garch_fit_1_0)
garch_fit_1_1 <- garchFit(~garch(1, 1), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
plot(garch_fit_1_1@residuals)
plot(garch_fit_1_1, which = 7)
#summary(garch_fit_1_1)
garch_fit_1_1 <- garchFit(~garch(2, 1), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
garch_fit_1_0 <- garchFit(~garch(1, 0), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
plot(garch_fit_1_0@residuals)
plot(garch_fit_1_0, which = 7)
#summary(garch_fit_1_0)
garch_fit_1_1 <- garchFit(~garch(2, 1), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
plot(garch_fit_1_1@residuals)
plot(garch_fit_1_1, which = 7)
#summary(garch_fit_1_1)
garch_fit_1_0 <- garchFit(~garch(1, 0), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
plot(garch_fit_1_0@residuals)
plot(garch_fit_1_0, which = 7)
#summary(garch_fit_1_0)
garch_fit_1_1 <- garchFit(~garch(1, 1), data = corr_data_1, include.mean = TRUE, cond.dist = "norm")
plot(garch_fit_1_1@residuals)
plot(garch_fit_1_1, which = 7)
#summary(garch_fit_1_1)
library(tidyverse)
library(lubridate)
library(plotrix)
library(vars)
covid_data = read.csv("other data/covid19-download.csv")
covid_description = read.csv("other data/covid19-casesdeaths-data-dictionary.csv")
covid_data = read.csv("other data/covid19-download.csv")
covid_description = read.csv("covid19-casesdeaths-data-dictionary.csv")
covid_data = read.csv("other data/covid19-download.csv")
covid_description = read.csv("other data/covid19-casesdeaths-data-dictionary.csv")
setwd("~/Documents/GitHub/Toronto-Shelter-Analysis")
library(tidyverse)
library(lubridate)
library(plotrix)
library(vars)
covid_data = read.csv("other data/covid19-download.csv")
covid_description = read.csv("other data/covid19-casesdeaths-data-dictionary.csv")
covid_data = read.csv("other data/covid19-download.csv")
# covid_description = read.csv("other data/covid19-casesdeaths-data-dictionary.csv")
bed = read.csv("top_5_bed_based_shelters.csv")
room = read.csv("top_5_room_based_shelters.csv")
library(tidyverse)
library(lubridate)
library(plotrix)
library(vars)
covid_data = read.csv("other data/covid19-download.csv")
# covid_description = read.csv("other data/covid19-casesdeaths-data-dictionary.csv")
bed = read.csv("top_5_bed_based_shelters.csv")
room = read.csv("top_5_room_based_shelters.csv")
aggregate_year_week = function(df) {
#' Groups df rows in year_week format.
#' Starts in Jan 3rd 2021 and ends on Sept 21st 2024.
#' Returns the transformed dataframe.
#' @param df The dataframe to be transformed
df %>%
filter(OCCUPANCY_DATE >= "2021-01-03" & OCCUPANCY_DATE <= "2024-09-21") %>%
mutate(
start_of_year = as.Date(paste0(year(OCCUPANCY_DATE), "-01-03")),  # Define Jan 3rd as start
week_of_year = as.integer(difftime(OCCUPANCY_DATE, start_of_year, units = "days") / 7) + 1,
year_week = paste0(year(OCCUPANCY_DATE), sprintf("%02d", week_of_year))
) %>%
summarise(
capacity_actual_sum = sum(capacity_actual_sum),
capacity_funding_sum = sum(capacity_funding_sum),
occupied_sum = sum(occupied_sum),
unoccupied_sum = capacity_actual_sum - occupied_sum,
unavailable_sum = capacity_funding_sum - capacity_actual_sum,
occupancy_rate = occupied_sum / capacity_actual_sum,
.by = c(year_week, shelter_location_pair)
)
}
# Apply to bed and room dataframes
bed_yr_week = aggregate_year_week(bed)
room_yr_week = aggregate_year_week(room)
# Add year_week to COVID data
modified_covid_data = covid_data %>%
filter(date >= "2021-01-03" & date <= "2024-09-21") %>%
mutate(
year_week = if_else(
reporting_week < 10,
paste0(as.character(reporting_year), "0", as.character(reporting_week)),
paste0(as.character(reporting_year), as.character(reporting_week))
)
) %>%
filter(prname == "Ontario")
# Combine room and bed data with COVID data
covid_with_beds = merge(
x = bed_yr_week,
y = modified_covid_data,
by = 'year_week'
)
covid_with_rooms = merge(
x = room_yr_week,
y = modified_covid_data,
by = 'year_week'
)
# Remove original COVID, bed, and room dataframes
rm(covid_data)
rm(bed)
rm(room)
# Make sure all columns are the appropriate datatype
colnames(covid_with_beds) == colnames(covid_with_rooms)
colnames(covid_with_beds)
# Getting numeric columns
# numeric_columns = colnames(select_if(covid_with_rooms, is.numeric))
numeric_columns = list(
"capacity_actual_sum",
"capacity_funding_sum",
"occupied_sum",
"unoccupied_sum",
"unavailable_sum",
"occupancy_rate",
"totalcases",
"numtotal_last7",
"ratecases_total",
"numdeaths",
"numdeaths_last7",
"ratedeaths",
"ratecases_last7",
"ratedeaths_last7",
"numtotal_last14",
"numdeaths_last14",
"ratetotal_last14",
"ratedeaths_last14",
"avgcases_last7",
"avgincidence_last7",
"avgdeaths_last7",
"avgratedeaths_last7"
)
# Cleaning numeric columns
for (col in numeric_columns)
{
# replace -'s with NA
covid_with_rooms[which(covid_with_rooms[col] == "-"),col] <- NA
covid_with_beds[which(covid_with_beds[col] == "-"),col] <- NA
# change to numeric datatype
covid_with_beds[,col] <- as.numeric(covid_with_beds[,col])
covid_with_rooms[,col] <- as.numeric(covid_with_rooms[,col])
}
# date needs to go from character to date type
covid_with_beds[,"date"] <- as.Date(covid_with_beds[,"date"])
covid_with_rooms[,"date"] <- as.Date(covid_with_rooms[,"date"])
plot_ts_acf_pacf = function(df, col, bed_or_room) {
#' Plots the ACF and PACF of col in df
#' @param df The dataframe
#' @param col The column in df
#' @param bed_or_room Either bed or room
for (pairing in unique(df$shelter_location_pair)) {
# filtered_df
filtered_df = df %>%
filter(shelter_location_pair == pairing) %>%
dplyr::select(all_of(col))
# ACF
acf_result <- acf(
filtered_df,
lag.max = 10000,
plot = FALSE,
na.action = na.pass
)
plot(acf_result, main = paste(
"ACF of", col, "for", bed_or_room, "based shelter:", pairing
))
# PACF
pacf_result <- pacf(
filtered_df,
lag.max = 10000,
plot = FALSE,
na.action = na.pass
)
plot(pacf_result, main = paste(
"PACF of", col, "for", bed_or_room, "based shelter:", pairing
))
}
}
plot_ts_acf_pacf(df = covid_with_beds, col = 'totalcases', bed_or_room = "bed")
plot_ts_acf_pacf(df = covid_with_beds, col = 'numdeaths', bed_or_room = 'bed')
plot_ts_acf_pacf(df = covid_with_rooms, col = 'totalcases', bed_or_room = 'room')
plot_ts_acf_pacf(df = covid_with_rooms, col = 'numdeaths', bed_or_room = 'room')
# Beds
for (pair in unique(covid_with_beds$shelter_location_pair)) {
subset = covid_with_beds %>%
filter(shelter_location_pair == pair) %>%
dplyr::select(year_week, totalcases, occupancy_rate) %>%
drop_na()
plot(
subset$totalcases,
subset$occupancy_rate,
type = 'b',
main = paste("Rate of Total Cases vs Occupancy Rate for shelter", pair))
}
# Rooms
for (pair in unique(covid_with_rooms$shelter_location_pair)) {
subset = covid_with_rooms %>%
filter(shelter_location_pair == pair) %>%
dplyr::select(year_week, totalcases, occupancy_rate)
plot(
subset$totalcases,
subset$occupancy_rate,
type = 'b',
main = paste("Rate of Total Cases vs Occupancy Rate for shelter", pair))
}
# Beds
for (pair in unique(covid_with_beds$shelter_location_pair)) {
subset = covid_with_beds %>%
filter(shelter_location_pair == pair) %>%
dplyr::select(year_week, ratedeaths, occupancy_rate)
plot(
subset$ratedeaths,
subset$occupancy_rate,
type = 'b',
main = paste("Rate of Deaths vs Occupancy Rate for shelter", pair))
}
# Rooms
for (pair in unique(covid_with_rooms$shelter_location_pair)) {
subset = covid_with_rooms %>%
filter(shelter_location_pair == pair) %>%
dplyr::select(year_week, ratedeaths, occupancy_rate)
plot(
subset$ratedeaths,
subset$occupancy_rate,
type = 'b',
main = paste("Rate of Deaths vs Occupancy Rate for shelter", pair))
}
subset = covid_with_beds %>%
filter(ratedeaths > 120)
ccf(subset$ratedeaths, subset$occupancy_rate, lag.max = 100)
x = cbind(subset$occupancy_rate, subset$ratedeaths)
VARselect(x, lag.max = 10, type = "both")
my_fit = VAR(x, p=3, type = 'both')
restrict(my_fit, method = 'ser')
my_residuals <- residuals(my_fit)
plot.ts(my_residuals)
serial.test(my_fit, lags.pt = 16, type = "PT.adjusted")
my_fit_pr <- predict(my_fit, n.ahead = 10, ci = 0.95)
fanchart(my_fit_pr, cis = c(0.95))
